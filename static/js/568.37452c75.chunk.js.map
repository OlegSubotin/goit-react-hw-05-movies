{"version":3,"file":"static/js/568.37452c75.chunk.js","mappings":"yOACA,GAAgB,KAAO,sBAAsB,KAAO,uB,SCM9CA,EACI,OADJA,EAEO,UAFPA,EAGQ,WAHRA,EAIQ,WAGC,SAASC,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAASJ,GAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAgBA,OAbAC,EAAAA,EAAAA,YAAU,WACNH,EAAUR,IACVY,EAAAA,EAAAA,IAAWV,GACNW,MAAK,SAAAC,GACF,IAAMC,EAAUD,EAAKE,KAAKC,QAAQC,KAAI,kBAA0C,CAAEC,GAA5C,EAAGA,GAA6CC,OAAhD,EAAOA,OAAiDC,QAAxD,EAAeA,QAAkDC,WAAjE,EAAwBA,eAC9DhB,EAAWS,GACXP,EAAUR,MACXuB,OAAM,SAAAd,GACLC,EAASD,GACTD,EAAUR,QAEnB,CAACE,KAGA,gCACKK,IAAWP,IAAe,wBAC1BO,IAAWP,IAAkB,SAACwB,EAAA,EAAD,IAC7BjB,IAAWP,IAAmB,eAAIyB,UAAWC,EAAAA,MAAf,SAAyBjB,IACvDF,IAAWP,GAAmBK,IAC3B,8BACwB,IAAnBA,EAAQsB,QACH,eAAIF,UAAWC,EAAAA,MAAf,wBACA,eAAID,UAAWC,EAAAA,KAAf,SACGrB,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,WAAxB,OACT,gBAAaG,UAAWC,EAAAA,KAAxB,WACI,eAAGD,UAAWC,EAAAA,KAAd,qBAA+BN,MAC/B,eAAGK,UAAWC,EAAAA,KAAd,sBAAgCL,MAChC,eAAGI,UAAWC,EAAAA,KAAd,mBAA6BJ,OAHxBH","sources":["webpack://goit-react-hw-05-movies/./src/views/Reviews/Reviews.module.css?ff11","views/Reviews/Reviews.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__69fYE\",\"item\":\"Reviews_item__Nzdax\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../../services/movie-api';\nimport Loader from 'components/Loader/Loader.js';\nimport s from './Reviews.module.css';\n\n\nconst STATUS = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n};\n\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState(null);\n    const [status, setStatus] = useState(STATUS.IDLE);\n    const [error, setError] = useState(null);\n\n\n    useEffect(() => {        \n        setStatus(STATUS.PENDING);\n        getReviews(movieId)\n            .then(resp => {\n                const newCast = resp.data.results.map(({ id, author, content, created_at }) => ({ id, author, content, created_at }));\n                setReviews(newCast);\n                setStatus(STATUS.RESOLVED)\n            }).catch(error => {\n                setError(error);\n                setStatus(STATUS.REJECTED);\n            });\n    }, [movieId]);\n    \n    return (\n        <>\n            {status === STATUS.IDLE && <></>}\n            {status === STATUS.PENDING && <Loader />}\n            {status === STATUS.REJECTED && <h1 className={s.title}>{error}</h1>}\n            {status === STATUS.RESOLVED && reviews &&\n                <>\n                    {reviews.length === 0\n                        ? <h1 className={s.title}>No info. </h1>\n                        : <ul className={s.list}>\n                            {reviews.map(({ id, author, content, created_at }) => (\n                                <li key={id} className={s.item}>\n                                    <p className={s.text}>Author: {author}</p>   \n                                    <p className={s.text}>Content: {content}</p>   \n                                    <p className={s.text}>Date: {created_at}</p>                           \n                                </li>\n                            ))}\n                        </ul>\n                    }\n                </>\n            }\n        </>\n    );\n};\n"],"names":["STATUS","Cast","movieId","useParams","useState","reviews","setReviews","status","setStatus","error","setError","useEffect","getReviews","then","resp","newCast","data","results","map","id","author","content","created_at","catch","Loader","className","s","length"],"sourceRoot":""}
{"version":3,"file":"static/js/678.49755878.chunk.js","mappings":"yOACA,GAAgB,KAAO,mBAAmB,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,oB,mBCMjGA,EACI,OADJA,EAEO,UAFPA,EAGQ,WAHRA,EAIQ,WAGC,SAASC,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASJ,GAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAgBA,OAbAC,EAAAA,EAAAA,YAAU,WACNH,EAAUR,IACVY,EAAAA,EAAAA,IAAQV,GACHW,MAAK,SAAAC,GACF,IAAMC,EAAUD,EAAKE,KAAKX,KAAKY,KAAI,kBAA4C,CAAEC,GAA9C,EAAGA,GAA+CC,KAAlD,EAAOA,KAAiDC,aAAxD,EAAaA,aAAyDC,UAAtE,EAA2BA,cAC9Df,EAAQS,GACRP,EAAUR,MACXsB,OAAM,SAAAb,GACLC,EAASD,GACTD,EAAUR,QAEnB,CAACE,KAGA,gCACKK,IAAWP,IAAe,wBAC1BO,IAAWP,IAAkB,SAACuB,EAAA,EAAD,IAC7BhB,IAAWP,IAAmB,eAAIwB,UAAWC,EAAAA,MAAf,SAAyBhB,IACvDF,IAAWP,GAAmBK,IAC3B,8BACqB,IAAhBA,EAAKqB,QACA,eAAIF,UAAWC,EAAAA,MAAf,wBACA,eAAID,UAAWC,EAAAA,KAAf,SACGpB,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACN,gBAAaG,UAAWC,EAAAA,KAAxB,WACI,gBACIE,IAAKP,EAAa,kCAAD,OAAoCA,GAAiBQ,EACtEC,IAAKV,EACLK,UAAWC,EAAAA,SAEf,eAAGD,UAAWC,EAAAA,KAAd,mBAA6BN,MAC7B,eAAGK,UAAWC,EAAAA,KAAd,wBAAkCJ,OAP7BH,e","sources":["webpack://goit-react-hw-05-movies/./src/views/Cast/Cast.module.css?f355","views/Cast/Cast.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__aEIzV\",\"item\":\"Cast_item__4WrzW\",\"image\":\"Cast_image__Wb81U\",\"text\":\"Cast_text__nCFyv\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../services/movie-api';\nimport Loader from 'components/Loader/Loader.js';\nimport s from './Cast.module.css';\nimport profileImage from '../../images/profileImage.png';\n\nconst STATUS = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n};\n\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState(null);\n    const [status, setStatus] = useState(STATUS.IDLE);\n    const [error, setError] = useState(null);\n\n\n    useEffect(() => {        \n        setStatus(STATUS.PENDING);\n        getCast(movieId)\n            .then(resp => {\n                const newCast = resp.data.cast.map(({ id, name, profile_path, character }) => ({ id, name, profile_path, character }));\n                setCast(newCast);\n                setStatus(STATUS.RESOLVED)\n            }).catch(error => {\n                setError(error);\n                setStatus(STATUS.REJECTED);\n            });\n    }, [movieId]);\n    \n    return (\n        <>\n            {status === STATUS.IDLE && <></>}\n            {status === STATUS.PENDING && <Loader />}\n            {status === STATUS.REJECTED && <h1 className={s.title}>{error}</h1>}\n            {status === STATUS.RESOLVED && cast &&\n                <>\n                    {cast.length === 0\n                        ? <h1 className={s.title}>No info. </h1>\n                        : <ul className={s.list}>\n                            {cast.map(({ id, name, profile_path, character }) => (\n                                <li key={id} className={s.item}>\n                                    <img\n                                        src={profile_path? `https://image.tmdb.org/t/p/w500${profile_path}` : profileImage}\n                                        alt={name}\n                                        className={s.image}\n                                    />\n                                    <p className={s.text}>Name: {name}</p>                            \n                                    <p className={s.text}>Character: {character}</p>                            \n                                </li>\n                            ))}\n                        </ul>\n                    }\n                </>\n            }\n        </>\n    );\n};\n"],"names":["STATUS","Cast","movieId","useParams","useState","cast","setCast","status","setStatus","error","setError","useEffect","getCast","then","resp","newCast","data","map","id","name","profile_path","character","catch","Loader","className","s","length","src","profileImage","alt"],"sourceRoot":""}
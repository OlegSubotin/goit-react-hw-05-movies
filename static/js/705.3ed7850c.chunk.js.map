{"version":3,"file":"static/js/705.3ed7850c.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieGallery/MovieGallery.module.css?cb9b","components/MovieGallery/MovieGallery.js","services/movie-api.js","webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.js","webpack://goit-react-hw-05-movies/./src/views/MoviesView/MoviesView.module.css?113d","views/MoviesView/MoviesView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieGallery_list__tZ4SP\",\"item\":\"MovieGallery_item__4tR9S\",\"image\":\"MovieGallery_image__GR1sS\",\"text\":\"MovieGallery_text__r6Cf+\",\"link\":\"MovieGallery_link__CmVj8\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport s from './MovieGallery.module.css';\nimport movieImage from '../../images/movieImage.jpg';\n\nconst MovieGallery = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <>\n            {movies.length > 0 && (\n                <ul className={s.list}>\n                    {movies.map(({ id, title, poster_path }) => (\n                        <li key={id} className={s.item}>\n                            <Link className={s.link} to={`/movies/${id}`} state={{ from: location.pathname + location.search }}>\n                            <img src={poster_path ? `https://image.tmdb.org/t/p/w500${poster_path}` : movieImage}\n                                alt={title}\n                                className={s.image}\n                            />\n                                <p className={s.text}>{title}</p>\n                                </Link>\n                        </li>\n                    ))}\n                </ul>\n            )}\n            {movies === 0 && Notiflix.Notify.info('Sorry, there is no movie')}\n        </>\n    );\n};\n\nMovieGallery.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            poster_path: PropTypes.string,\n        })\n    )\n};\n\nexport default MovieGallery;\n\n\n\n","const axios = require('axios');\nconst KEY = 'd738edb014e8e3b583b9023797190025';\nconst URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies=()=> {\n    const url = `${URL}trending/movie/day?api_key=${KEY}&page=${1}`;\n    const resp = axios.get(url);\n    return resp;\n};\n\nexport function getSearchMovie (movie) {\n    const url = `${URL}search/movie?api_key=${KEY}&query=${movie}`;\n    const resp = axios.get(url);\n    return resp;\n};\n\nexport function getMovieById (movieId) {\n    const url = `${URL}movie/${movieId}?api_key=${KEY}`;\n    const resp = axios.get(url);\n    return resp;\n};\n\nexport function getCast(movieId) {\n    const url = `${URL}movie/${movieId}/credits?api_key=${KEY}`;\n    const resp = axios.get(url);\n    return resp;\n};\n\nexport function getReviews(movieId) {\n    const url = `${URL}movie/${movieId}/reviews?api_key=${KEY}`;\n    const resp = axios.get(url);\n    return resp;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchBar_wrapper__KGK67\",\"form\":\"SearchBar_form__gW7Gj\",\"button\":\"SearchBar_button__T7RTc\",\"input\":\"SearchBar_input__bIy50\"};","import { useState } from 'react';\nimport { BsSearch } from 'react-icons/bs';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport s from './SearchBar.module.css';\n\nfunction SearchBar({ onSubmit }) {\n    const [query, setQuery] = useState('');\n\n    function handleQueryChange(e) {\n        setQuery(e.currentTarget.value.toLowerCase());\n    };\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        if (query.trim() === '') {\n            Notiflix.Notify.info('Put a movie name you are looking for');\n            return;\n        };\n\n        onSubmit(query);\n        setQuery('');\n    };\n\n    return (\n        <div className={s.wrapper}>\n            <form className={s.form} onSubmit={handleSubmit}>\n                <input\n                    className={s.input}\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movie\"\n                    value={query}\n                    onChange={handleQueryChange}\n                />\n                <button className={s.button}>\n                    <span className={s.buttonLabel}> <BsSearch fill='#00008b' /></span>\n                </button>\n            </form>\n        </div>\n    );\n};\n\nSearchBar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MoviesView_title__aHOX4\"};","import { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport SearchBar from 'components/SearchBar';\nimport { getSearchMovie } from '../../services/movie-api';\nimport MovieGallery from 'components/MovieGallery';\nimport Loader from 'components/Loader/Loader.js';\nimport s from './MoviesView.module.css';\n\nconst STATUS = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n};\n\nexport default function MovieView() {\n    const [query, setQuery] = useState('');\n    const [status, setStatus] = useState(STATUS.IDLE);\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n\n\n    useEffect(() => {\n        if (query === '') {\n            return;\n        };\n        \n        setStatus(STATUS.PENDING);\n        getSearchMovie(query)\n            .then(resp => {\n                const newMovies = resp.data.results.map(({ id, poster_path, title }) => ({ id, poster_path, title, }));\n                setMovies(newMovies);\n                setStatus(STATUS.RESOLVED)\n            }).catch(error => {\n                setError(error);\n                setStatus(STATUS.REJECTED);\n            });\n    }, [query]);\n\n    function handleFormSubmit(req) {\n        if (query === req) {\n            Notiflix.Notify.info('You have already found your movies');\n            return;\n        } else {\n            setMovies([]);\n            setQuery(req);\n        };\n    };\n\n\n    \n    \n    return (\n        <>\n            <SearchBar onSubmit={handleFormSubmit} />\n            {status === STATUS.IDLE && <h1 className={s.title}>We can find any movie you want </h1>}\n            {status === STATUS.PENDING && <Loader />}\n            {status === STATUS.REJECTED && <h1 className={s.title}>{error}</h1>}\n            {status === STATUS.RESOLVED && movies &&\n                <>                    \n                    {movies.length === 0\n                        ? <h1 className={s.title}>Your movie is very specific </h1>\n                        : <><h1 className={s.title}>We've found for you:</h1><MovieGallery movies={movies} /></>\n                    }\n                </>\n            }\n        </>\n    );\n};\n"],"names":["movies","location","useLocation","length","className","s","map","id","title","poster_path","to","state","from","pathname","search","src","movieImage","alt","Notiflix","axios","require","KEY","URL","getTrendingMovies","url","get","getSearchMovie","movie","getMovieById","movieId","getCast","getReviews","onSubmit","useState","query","setQuery","e","preventDefault","trim","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","fill","STATUS","MovieView","status","setStatus","setMovies","error","setError","useEffect","then","resp","newMovies","data","results","catch","req","Loader","MovieGallery"],"sourceRoot":""}